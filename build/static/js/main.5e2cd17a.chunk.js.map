{"version":3,"sources":["components/perfil.png","context/notes/noteContext.js","components/Navbar.js","components/AddNote.js","components/Noteitem.js","components/Notes.js","components/Home.js","components/About.js","context/notes/NoteState.js","components/Alert.js","components/Login.js","components/Signup.js","App.js","index.js"],"names":["noteContext","createContext","Navbar","history","useHistory","location","useLocation","context","useContext","user","getUser","className","to","type","id","pathname","localStorage","getItem","style","marginRight","onClick","push","color","cursor","name","email","removeItem","role","AddNote","props","addNote","useState","title","description","tag","incomingNote","setnote","onChange","e","target","value","htmlFor","minLength","required","disabled","length","preventDefault","showAlertProp","Noteitem","deleteNote","noteprop","_id","updateNoteProp","Notes","notes","getNotes","editNote","useEffect","ref","useRef","refClose","editedtitle","editeddescription","editedtag","updateNote","element","current","click","tabindex","console","log","map","Home","About","height","borderRadius","src","require","default","alt","NoteState","host","setnotes","a","fetch","method","headers","response","json","body","JSON","stringify","noteFromAPI","concat","newNotes","filter","noteWithTrashID","parse","index","setuser","jsonData","Provider","children","Alert","alertProp","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Login","password","credentials","setCredentials","handleSubmit","success","setItem","authToken","onSubmit","Signup","cpassword","App","alert","setAlert","showAlert","message","setTimeout","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e2cd17a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/perfil.94c28cb2.png\";","import { createContext } from \"react\";\r\n\r\nconst noteContext = createContext();\r\n\r\nexport default noteContext; ","import React from 'react'\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { useHistory } from 'react-router';\r\nimport { useContext } from 'react';\r\nimport noteContext from '../context/notes/noteContext'\r\n\r\nconst Navbar = () => {\r\n\r\n    let history = useHistory();\r\n    const handleLogout = () => {\r\n        localStorage.removeItem('token');\r\n        history.push('/login')\r\n    }\r\n    let location = useLocation();\r\n\r\n    const context = useContext(noteContext);\r\n    const { user, getUser } = context;\r\n    \r\n\r\n    const onUserClick = () => {\r\n        if (localStorage.getItem('token')) {\r\n            getUser()\r\n            \r\n        }\r\n        else {\r\n            history.push('/login')\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <div className=\"container-fluid\">\r\n                    <Link className=\"navbar-brand\" to=\"/\">Notabilty on Cloud</Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className={`nav-link ${location.pathname === \"/\" ? \"active\" : \"\"}`} aria-current=\"page\" to=\"/\">Home</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className={`nav-link ${location.pathname === \"/about\" ? \"active\" : \"\"}`} to=\"/about\">About</Link>\r\n                            </li>\r\n\r\n                        </ul>\r\n                        {!localStorage.getItem('token') ? <form className=\"d-flex\">\r\n                            <Link className=\"btn btn-primary mx-4\" to=\"/login\" role=\"button\">Login</Link>\r\n                            <Link className=\"btn btn-primary mx-4\" to=\"/signup\" role=\"button\">Sign up</Link>\r\n                        </form> : <><div className=\"btn-group\" style={{marginRight: \"21rem\"}} >\r\n                            <button type=\"button\" className=\"btn btn-dark dropdown-toggle btn-sm\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" onClick={onUserClick} style={{ color: \"whitesmoke\" }}>\r\n                            <i className=\"fas fa-portrait\"></i>\r\n                            </button>\r\n                            <ul className=\"dropdown-menu\" >\r\n                                <li className=\"dropdown-item\" style={{ cursor: \"pointer\" }}>Name: {user.name} </li>\r\n                                <li className=\"dropdown-item\" style={{ cursor: \"pointer\" }}>Email: {user.email}  </li>\r\n                                <li className=\"dropdown-item\" style={{ cursor: \"pointer\" }}>Happy note taking!</li>\r\n                            </ul>\r\n                        </div><button onClick={handleLogout} className=\"btn btn-primary mx-4\">Logout</button></>}\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n\r\n\r\n/* NOTES\r\n\r\n1. Directly write rafce to get the snippet of react functional based component with export\r\n\r\n\r\n2. {!localStorage.getItem('token')?<form className=\"d-flex\">\r\n                        <Link className=\"btn btn-primary mx-2\" to=\"/login\" role=\"button\">Login</Link>\r\n                        <Link className=\"btn btn-primary mx-2\" to=\"/signup\" role=\"button\">Sign up</Link>\r\n                        </form>: <button className=\"btn btn-primary\">Logout</button>}\r\n\r\nthis basically means that when there is no token present in the localStorage, just show log in and sign up. Else show log out.\r\n\r\n*/","import React from 'react'\r\nimport { useContext, useState } from 'react'\r\nimport noteContext from '../context/notes/noteContext'\r\n\r\nconst AddNote = (props) => {\r\n    const context = useContext(noteContext);\r\n    const {addNote} = context; //importing addNote function from NoteState\r\n\r\n    //Defining a state of a note which is empty. \r\n    const [incomingNote, setnote] = useState({title: \"\", description: \"\", tag: \"\"})\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        addNote(incomingNote.title, incomingNote.description, incomingNote.tag)  //Using our add Note function. addNote function is defined in NoteState.js\r\n\r\n        //Now when you click on submit the fields should be empty again, therefore\r\n        setnote({title: \"\", description: \"\", tag: \"\"})\r\n\r\n        //Time to show alert\r\n        props.showAlertProp(\"Yay! The note has been added successfully\", \"success\")\r\n    }\r\n\r\n    const onChange = (e)=>{\r\n        setnote({...incomingNote, [e.target.name]: e.target.value}) //Syntax: Spread operator. It is basically telling that whatever note is, keep that and overwrite whatever written ahead. e.target.name would be title, description and tag and e.target.value would be the text in each. Therefore it will be updated\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container my-3\">\r\n                <h2>Add a note</h2>\r\n                <form>\r\n                    <div className=\"mb-3\">\r\n                        <label htmlFor=\"title\" className=\"form-label\">Title</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"title\" name=\"title\" aria-describedby=\"emailHelp\" onChange = {onChange} value={incomingNote.title} minLength= {5} required />\r\n                        \r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                        <label htmlFor=\"description\" className=\"form-label\">description</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"description\" name=\"description\" onChange = {onChange} value={incomingNote.description} minLength= {5} required />\r\n                    </div>\r\n\r\n                    <div className=\"mb-3\">\r\n                        <label htmlFor=\"tag\" className=\"form-label\">tag</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"tag\" name=\"tag\" onChange = {onChange} value = {incomingNote.tag}/>\r\n                    </div>\r\n                    \r\n                    <button disabled={incomingNote.title.length<5 || incomingNote.description.length<5} type=\"submit\" className=\"btn btn-primary\" onClick = {handleSubmit}>Submit</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNote\r\n","import React from 'react'\r\nimport { useContext} from 'react'\r\nimport noteContext from '../context/notes/noteContext'\r\n\r\n\r\nconst Noteitem = (props) => {\r\n    const context = useContext(noteContext);\r\n    const {deleteNote} = context;\r\n\r\n    return (\r\n    <div className=\"col-md-3\">\r\n        <div className=\"card my-3\">\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{props.noteprop.title}</h5>\r\n                <p className=\"card-text\">{props.noteprop.description}</p>\r\n                <i className=\"fas fa-trash mx-2\" onClick = { ()=>{deleteNote(props.noteprop._id); props.showAlertProp(\"Whoosh! It's gone.\", \"warning\")}}></i>\r\n                <i className=\"far fa-edit mx-2\" onClick ={()=>{ props.updateNoteProp(props.noteprop) }} ></i>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Noteitem\r\n\r\n\r\n/* NOTES\r\n{props.noteprop.title} because noteprop is passing an element which has title, description.... of a note therefore another . to access that\r\n\r\n\r\nImporting the deleteNote fucntion using context because we would want to delete a node when we click on the trash icon.\r\n\r\nprops.updateNoteProp is basically the updateNote function which is taking the whole note therefore passing the whole element which is props.noteprop. \r\n*/\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useContext } from 'react'\r\nimport noteContext from '../context/notes/noteContext'\r\nimport AddNote from './AddNote';\r\nimport Noteitem from './Noteitem';\r\nimport { useHistory } from 'react-router';\r\n\r\n//Here we shall impliment our CRUD operations using the functions defined in NoteState.js to update the backend and write the client side logic to update the front end.\r\n\r\nconst Notes = (props) => {\r\n    const context = useContext(noteContext);\r\n    const { notes, getNotes, editNote } = context; //importing notes and getNotes from NoteState. addNote is seperate in AddNote component, which we will import later on.\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        if (localStorage.getItem('token')) {\r\n            getNotes()\r\n        }\r\n        else{\r\n            history.push(\"/login\")\r\n        }\r\n        // eslint-disable-next-line\r\n    }, []) //useEffect is similar to componentDidMound. (Runs once)\r\n\r\n    const ref = useRef(null)\r\n    const refClose = useRef(null)\r\n\r\n\r\n    //Time to edit the note.\r\n    const [incomingNote, setnote] = useState({id: \"\", editedtitle: \"\", editeddescription: \"\", editedtag: \"\"})\r\n\r\n    const updateNote = (element) => { //this element is a particular note and will come from when you'll click the edit icon\r\n        ref.current.click() //What is this? Well, we have used ref={ref} in the Launch Demo Modal button. We want to display that modal when we click on update note button therefore we do ref.current.click() here and hide that original button using bootstrap class called d-none. Therefore, we are basically clicking that button but with the help of a function and using ref. This is called clicking Programitacally. \r\n        setnote({id: element._id, editedtitle: element.title, editeddescription: element.description, editedtag: element.tag}) //to show the current title, description and tag in the modal as well\r\n    }\r\n\r\n    //copy pasting from AddNote component\r\n\r\n    const handleSubmit = (e)=>{\r\n        console.log(\"Updating the note from current state to the updated state: \", incomingNote)\r\n\r\n        editNote(incomingNote.id, incomingNote.editedtitle, incomingNote.editeddescription, incomingNote.editedtag)\r\n\r\n        refClose.current.click(); //refclose is put in close button therefore when you will click on update button this function will run and then refClose.current.click() will run hence closing the modal.\r\n\r\n        //Time to show an alert that the note has been updated\r\n        props.showAlertProp(\"Abracadabra! The note has been updated.\", \"success\")\r\n    }\r\n\r\n    const onChange = (e)=>{\r\n        setnote({...incomingNote, [e.target.name]: e.target.value}) //Syntax: Spread operator. It is basically telling that whatever note is, keep that and overwrite whatever written ahead. e.target.name would be title, description and tag and e.target.value would be the text in each. Therefore it will be updated\r\n    }\r\n    return (\r\n        <>\r\n            <AddNote showAlertProp = {props.showAlertProp} />\r\n\r\n\r\n            <button ref={ref} type=\"button\" className=\"btn btn-primary d-none\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\r\n                Launch demo modal\r\n            </button>\r\n\r\n\r\n            <div className=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">Edit note</h5>\r\n                            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            {/* Here the form will come again  */}\r\n                            <form>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"title\" className=\"form-label\">Title</label>\r\n                                    <input type=\"text\" className=\"form-control\" id=\"editedtitle\" name=\"editedtitle\" value = {incomingNote.editedtitle} aria-describedby=\"emailHelp\" onChange={onChange} minLength= {5} required />\r\n\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"description\" className=\"form-label\">description</label>\r\n                                    <input type=\"text\" className=\"form-control\" id=\"editeddescription\" name=\"editeddescription\" value = {incomingNote.editeddescription} onChange={onChange} minLength= {5} required />\r\n                                </div>\r\n\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"tag\" className=\"form-label\">tag</label>\r\n                                    <input type=\"text\" className=\"form-control\" id=\"editedtag\" name=\"editedtag\" value = {incomingNote.editedtag} onChange={onChange} />\r\n                                </div>\r\n\r\n                                {/* <button type=\"submit\" className=\"btn btn-primary\" onClick={handleSubmit}>Submit</button> */}\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button ref = {refClose} type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n                            <button disabled={incomingNote.editedtitle.length<5 || incomingNote.editeddescription.length<5} type=\"button\" className=\"btn btn-primary\" onClick={handleSubmit}>Update the note, just like that!</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div className=\"row my-3\">\r\n                    <h2>Your notes.</h2>\r\n                    <div className=\"container\">\r\n                        {notes.length===0 && 'You have not written any notes. Fancy picking up the pen?'}\r\n                    </div>\r\n                    {notes.map((element) => {\r\n                        return <Noteitem key={element._id} updateNoteProp={updateNote} noteprop={element} showAlertProp = {props.showAlertProp} />\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Notes\r\n\r\n\r\n\r\n\r\n/* NOTES\r\n\r\nWe use key when using map, and our api is returning _id for every note and it's unique therefore we have used that.\r\n\r\nNote that useRef hook is mostly used to target DOM items and clicking them Programitacally.\r\n\r\n*/","\r\nimport Notes from './Notes';\r\n\r\nconst Home = (props) => {\r\n    \r\n\r\n    return (\r\n        <div>\r\n\r\n            <Notes showAlertProp = {props.showAlertProp} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n\r\n/* Note that you're bringing this showAlertProp from App.js. Therefore from app.js to home.js and then again sending it to Notes.js. So, this is prop drilling and to save ourselves from this prop drilling we make use of ContextAPI. We could have used context API only but since we are only drilling it into 2 components it's okay.\r\n\r\n*/","\r\n\r\nimport React from 'react'\r\n\r\n\r\nconst About = () => {\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <hr />\r\n            <div className=\"container\">\r\n                <h1>What is Notability on Cloud?</h1>\r\n                <p>Well, it is basically a note taking app which stores your notes safely on the cloud. It has the ability to store your precious note title along with its description as well as a tag.</p>\r\n            </div>\r\n            <div className=\"container\">\r\n                <h1>What are the technologies used to build this app?</h1>\r\n                <p>NoC was built using React, Node.js, Express, brcypt etc. </p>\r\n            </div>\r\n            <div className=\"container\">\r\n                <h1>About the dev.</h1>\r\n                <div className=\"container d-flex\">\r\n                    <img style={{ height: \"150px\", borderRadius: \"100px\" }} src={require(\"./perfil.png\").default} alt=\"\" />\r\n                    <p>Prateek has multiple projects in Web Development under his belt. Although he rarely wears a real belt, his virtual belt of projects is always growing. He will probably always be a developer at heart. A growing interest in React Native has led him to help his sister-in-law in making an application for her business. </p>\r\n                </div>\r\n                <hr />\r\n                <p>See his website: <strong> www.prateekgandhi.in</strong> </p>\r\n                <p>You can reach Prateek at: <strong>prateekgandhi718@gmail.com</strong> </p>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default About\r\n","\r\nimport noteContext from \"./noteContext\";\r\nimport { useState } from \"react\";\r\n\r\nconst NoteState = (props) => {\r\n    const host = \"https://notabilityoncloud.herokuapp.com/\"\r\n    const notesInitial = []\r\n    const [notes, setnotes] = useState(notesInitial)\r\n\r\n    //Get all notes\r\n    const getNotes = async () => {\r\n        //API call\r\n        const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': localStorage.getItem('token') //Since we have stored the authToken by the name of token in local storage.\r\n            },\r\n        });\r\n        const json = await response.json()\r\n        console.log(json)\r\n        setnotes(json) //using the hook\r\n    }\r\n\r\n\r\n\r\n    //Add a note\r\n    const addNote = async (title, description, tag) => {\r\n\r\n        //API call\r\n        const response = await fetch(`${host}/api/notes/addnote`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': localStorage.getItem('token') //Since we have stored the authToken by the name of token in local storage.\r\n            },\r\n            body: JSON.stringify({ title, description, tag })\r\n        });\r\n\r\n        //Logic to add on client side \r\n        const noteFromAPI = await response.json();\r\n        setnotes(notes.concat(noteFromAPI))\r\n    }\r\n\r\n    //Delete a note\r\n    const deleteNote = async (id) => { //giving the note ID from Noteitem.\r\n\r\n        //API call\r\n        const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': localStorage.getItem('token') //Since we have stored the authToken by the name of token in local storage.\r\n            }\r\n        });\r\n        const json = response.json();\r\n        console.log(json)\r\n\r\n        //Logic for client side\r\n        // console.log(\"Deleting the note with ID = \" + id);\r\n\r\n        const newNotes = notes.filter((noteWithTrashID) => { return noteWithTrashID._id !== id }) //it will delete that note on which trash icon is clicked.You could have written any argument instead of noteWithTrash cause it will just filter taking that argument.\r\n        setnotes(newNotes)\r\n    }\r\n\r\n    //Edit a note\r\n    const editNote = async (id, title, description, tag) => {\r\n\r\n        //API CALL (use fetch API using headers. Search on google)\r\n        const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': localStorage.getItem('token') //Since we have stored the authToken by the name of token in local storage.\r\n            },\r\n            body: JSON.stringify({ title, description, tag })\r\n        });\r\n        const json = await response.json();\r\n\r\n\r\n        //Logic to edit the note on client side\r\n        //Since we can't the state therefore make a new variable to store newNotes\r\n        let newNotes = JSON.parse(JSON.stringify(notes))\r\n        for (let index = 0; index < newNotes.length; index++) {\r\n            const element = newNotes[index];\r\n            if (element._id === id) { //because mongodb mein notes ki id wala columns is _id\r\n                newNotes[index].title = title;\r\n                newNotes[index].description = description;\r\n                newNotes[index].tag = tag;\r\n                break;\r\n            }\r\n        }\r\n        setnotes(newNotes);\r\n    }\r\n\r\n\r\n    //Get user details\r\n\r\n\r\n    const [user, setuser] = useState([])\r\n    const getUser = async () => {\r\n        //API call\r\n        const response = await fetch(`${host}/api/auth/getuser`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': localStorage.getItem('token') //Since we have stored the authToken by the name of token in local storage.\r\n            },\r\n        });\r\n        const jsonData = await response.json()\r\n        setuser(jsonData) //using the hook\r\n        // console.log(user)\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <noteContext.Provider value={{ notes, addNote, deleteNote, editNote, getNotes, user, getUser }}>\r\n            {props.children}\r\n        </noteContext.Provider>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default NoteState;\r\n\r\n/* NOTES\r\n1. By doing this you can access this state in any component. Just wrap the app.js code in noteState tag.\r\n2. You could also pass a function that would be accessible in any component (as discussed in the video.)\r\n\r\n3. <noteContext.Provider value={{notes, setnotes}}> ------> We are exporting notes and setnotes hook by which we can change the notes.\r\n*/","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        if (word===\"danger\") { //basically our alert banner was showing Danger: Incorrect cred... we wanted error and not danger. Danger was used because it's a bootstrap class.\r\n            word = \"error\"\r\n        }\r\n        else if (word===\"warning\") {\r\n            word = \"done\"\r\n        }\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n        {props.alertProp && <div className={`alert alert-${props.alertProp.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalize(props.alertProp.type)}</strong>: {props.alertProp.msg} \r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert","import React, {useState} from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n\r\nconst Login = (props) => {\r\n    const [credentials, setCredentials] = useState({email: \"\", password: \"\"}) \r\n    let history = useHistory(); //use history is a hook from react-router-dom\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const response = await fetch(\"https://notabilityoncloud.herokuapp.com/api/auth/login\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({email: credentials.email, password: credentials.password})\r\n        });\r\n        const json = await response.json()\r\n        console.log(json);\r\n        //If the Email and password matches i.e., if success = true. Success is coming from backend.\r\n        if (json.success){\r\n            // Save the auth token in local storage and redirect\r\n            localStorage.setItem('token', json.authToken); \r\n            props.showAlertProp(\"Yay! You have been logged in successfully.\", \"success\");\r\n            history.push(\"/\");\r\n        }\r\n        else{\r\n            \r\n            props.showAlertProp(\"Whoops! Invalid Credentials :(\", \"danger\");\r\n        }\r\n    }\r\n\r\n    const onChange = (e)=>{\r\n        setCredentials({...credentials, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    return (\r\n        <div className = \"mt-4\">\r\n            <h2>Welcome back. Please login to use Notability.</h2>\r\n            <form  onSubmit={handleSubmit}>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"email\" className=\"form-label\">Email address</label>\r\n                    <input type=\"email\" className=\"form-control\" value={credentials.email} onChange={onChange} id=\"email\" name=\"email\" aria-describedby=\"emailHelp\" />\r\n                    <div id=\"emailHelp\" className=\"form-text\">We will not share your email with anyone.</div>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n                    <input type=\"password\" className=\"form-control\" value={credentials.password} onChange={onChange} name=\"password\" id=\"password\" />\r\n                </div>\r\n\r\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n\r\n/* NOTES\r\n\r\nWe have used onSubmit(done on a form) here rather than onClick (done on button). You can use either.\r\n\r\nThe good thing about onSubmit (done on a form) is when you write minlength and required in the divs in the form, they will work and provide an in-browser validation.\r\n\r\n*/","import React, {useState} from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst Signup = (props) => {\r\n    const [credentials, setCredentials] = useState({name: \"\", email: \"\", password: \"\", cpassword: \"\"}) \r\n    let history = useHistory(); //use history is a hook from react-router-dom\r\n    \r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const response = await fetch(\"https://notabilityoncloud.herokuapp.com/api/auth/createuser\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({name:credentials.name, email: credentials.email, password: credentials.password})\r\n        });\r\n        const json = await response.json()\r\n        console.log(json);\r\n        \r\n        if (json.success){\r\n            // Save the auth token in local storage and redirect\r\n            localStorage.setItem('token', json.authToken); \r\n            props.showAlertProp(\"Yay! Account has been created successfully.\", \"success\");\r\n            history.push(\"/\");\r\n        }\r\n        else{\r\n            props.showAlertProp(\"Whoops! Something is wrong. Could you please check again?\", \"danger\");\r\n        }\r\n    }\r\n\r\n    //To take the whatever user is typing and change the empty credentials to whatever he has typed:\r\n    const onChange = (e)=>{\r\n        setCredentials({...credentials, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    return (\r\n        <div className = \"mt-4\">\r\n            <h2>Hola! Let's sign up, shall we?</h2>\r\n            <form  onSubmit={handleSubmit}>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"name\" className=\"form-label\">Name</label>\r\n                    <input type=\"text\" className=\"form-control\" onChange={onChange} id=\"name\" name = \"name\" aria-describedby=\"emailHelp\" />\r\n                    \r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"email\" className=\"form-label\">Email address</label>\r\n                    <input type=\"email\" className=\"form-control\" onChange={onChange} id=\"email\" name = \"email\" aria-describedby=\"emailHelp\" />\r\n                    <div id=\"emailHelp\" className=\"form-text\">Don't worry, we'll never share your email with anyone else.</div>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n                    <input type=\"password\" className=\"form-control\" onChange={onChange} id=\"password\" name =\"password\" minLength={5} required />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"cpassword\" className=\"form-label\">Confirm Password</label>\r\n                    <input type=\"password\" className=\"form-control\" onChange={onChange} id=\"cpassword\" name =\"cpassword\" minLength={5} required />\r\n                </div>\r\n\r\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup\r\n","\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport Navbar from './components/Navbar';\nimport Home from './components/Home';\nimport About from './components/About';\nimport NoteState from './context/notes/NoteState';\nimport Alert from './components/Alert';\nimport Login from './components/Login';\nimport Signup from './components/Signup';\nimport { useState } from 'react';\n\nfunction App() {\n  const [alert, setAlert] = useState(null)\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  return (\n    <>\n      <NoteState>\n        <Router>\n          <Navbar />\n          <Alert alertProp = {alert} />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\">\n                <Home showAlertProp = {showAlert} />\n              </Route>\n              <Route exact path=\"/about\">\n                <About />\n              </Route>\n              <Route exact path=\"/login\">\n                <Login showAlertProp = {showAlert} />\n              </Route>\n              <Route exact path=\"/signup\">\n                <Signup showAlertProp = {showAlert} />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      </NoteState>\n    </>\n  );\n}\n\nexport default App;\n\n\n/* NOTES\n\n1. We will use context API here. When our complexity of app increases it becomes difficult to check a state in a particular component because we will have to pass the props in every component occuring before; hence use context.\n2.\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}